/*
 * Beneficiary
 * The beneficiaries resource is used by an AISP to retrieve the account beneficiaries information for a specific AccountId or to retrieve the beneficiaries information in bulk for account(s) that the PSU has authorised to access.
 *
 * OpenAPI spec version: 3.1.7
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Beneficiary);
  }
}(this, function(expect, Beneficiary) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OBBeneficiary5', function() {
      beforeEach(function() {
        instance = new Beneficiary.OBBeneficiary5();
      });

      it('should create an instance of OBBeneficiary5', function() {
        // TODO: update the code to test OBBeneficiary5
        expect(instance).to.be.a(Beneficiary.OBBeneficiary5);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property beneficiaryId (base name: "beneficiaryId")', function() {
        // TODO: update the code to test the property beneficiaryId
        expect(instance).to.have.property('beneficiaryId');
        // expect(instance.beneficiaryId).to.be(expectedValueLiteral);
      });

      it('should have the property beneficiaryType (base name: "beneficiaryType")', function() {
        // TODO: update the code to test the property beneficiaryType
        expect(instance).to.have.property('beneficiaryType');
        // expect(instance.beneficiaryType).to.be(expectedValueLiteral);
      });

      it('should have the property creditorAccount (base name: "creditorAccount")', function() {
        // TODO: update the code to test the property creditorAccount
        expect(instance).to.have.property('creditorAccount');
        // expect(instance.creditorAccount).to.be(expectedValueLiteral);
      });

      it('should have the property creditorAgent (base name: "creditorAgent")', function() {
        // TODO: update the code to test the property creditorAgent
        expect(instance).to.have.property('creditorAgent');
        // expect(instance.creditorAgent).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property supplementaryData (base name: "supplementaryData")', function() {
        // TODO: update the code to test the property supplementaryData
        expect(instance).to.have.property('supplementaryData');
        // expect(instance.supplementaryData).to.be(expectedValueLiteral);
      });

    });
  });

}));
