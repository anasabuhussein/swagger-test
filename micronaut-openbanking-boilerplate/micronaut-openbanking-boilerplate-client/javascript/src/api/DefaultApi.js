/*
 * Beneficiary
 * The beneficiaries resource is used by an AISP to retrieve the account beneficiaries information for a specific AccountId or to retrieve the beneficiaries information in bulk for account(s) that the PSU has authorised to access.
 *
 * OpenAPI spec version: 3.1.7
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ModelObject} from '../model/ModelObject';
import {OBBeneficiary5} from '../model/OBBeneficiary5';
import {OBReadBeneficiary5} from '../model/OBReadBeneficiary5';

/**
* Default service.
* @module api/DefaultApi
* @version 3.1.7
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createBeneficiary operation.
     * @callback moduleapi/DefaultApi~createBeneficiaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/OBBeneficiary5} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.topic 
     * @param {String} opts.key 
     * @param {module:api/DefaultApi~createBeneficiaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createBeneficiary(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBeneficiary");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'topic': opts['topic'],'key': opts['key']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/beneficiary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteBeneficiary operation.
     * @callback moduleapi/DefaultApi~deleteBeneficiaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} beneficiaryId 
     * @param {module:api/DefaultApi~deleteBeneficiaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteBeneficiary(beneficiaryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'beneficiaryId' is set
      if (beneficiaryId === undefined || beneficiaryId === null) {
        throw new Error("Missing the required parameter 'beneficiaryId' when calling deleteBeneficiary");
      }

      let pathParams = {
        'BeneficiaryId': beneficiaryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/beneficiary{/BeneficiaryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAccountBeneficiaries operation.
     * @callback moduleapi/DefaultApi~getAccountBeneficiariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OBReadBeneficiary5{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} accountId 
     * @param {module:api/DefaultApi~getAccountBeneficiariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAccountBeneficiaries(accountId, callback) {
      
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountBeneficiaries");
      }

      let pathParams = {
        'AccountId': accountId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OBReadBeneficiary5;

      return this.apiClient.callApi(
        '/account{/AccountId}/beneficiaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBeneficiaries operation.
     * @callback moduleapi/DefaultApi~getBeneficiariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OBReadBeneficiary5{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {module:api/DefaultApi~getBeneficiariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBeneficiaries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OBReadBeneficiary5;

      return this.apiClient.callApi(
        '/beneficiaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateBeneficiary operation.
     * @callback moduleapi/DefaultApi~updateBeneficiaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelObject{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/OBBeneficiary5} body 
     * @param {String} beneficiaryId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.topic 
     * @param {String} opts.key 
     * @param {module:api/DefaultApi~updateBeneficiaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateBeneficiary(body, beneficiaryId, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBeneficiary");
      }
      // verify the required parameter 'beneficiaryId' is set
      if (beneficiaryId === undefined || beneficiaryId === null) {
        throw new Error("Missing the required parameter 'beneficiaryId' when calling updateBeneficiary");
      }

      let pathParams = {
        'BeneficiaryId': beneficiaryId
      };
      let queryParams = {
        'topic': opts['topic'],'key': opts['key']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelObject;

      return this.apiClient.callApi(
        '/beneficiary{/BeneficiaryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}